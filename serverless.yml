# org: kfrawee # will requires serverless login while calling $ serverless deploy 
app: image-recognition
service: image-recognition

frameworkVersion: "2 || 3"

plugins:
  - "serverless-python-requirements"

layers:
  pyimage:
    path: layers/pyimage
    description: |
      Lambda layer contains helper functions for aws services 
      and other common functions to avoid repeating the code.
    compatibleRuntimes:
      - python3.8

custom:
  pythonRequirements:
    dockerizePip: non-linux
  BUCKET_NAME: ${self:service}-bucket
  TABLE_NAME: ${self:service}-table

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  timeout: 29
  versionFunctions: false

  environment:
    SERVICE_NAME: ${self:service}
    MAIN_BUCKET: ${self:custom.BUCKET_NAME}-${self:provider.stage}
    MAIN_TABLE: ${self:custom.TABLE_NAME}-${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
          Resource:
            Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - "Ref": "MainBucket"
              - "/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
          Resource:
            - Fn::GetAtt: 
              - MainTable
              - Arn
            - Fn::GetAtt: 
              - MainTable
              - StreamArn
        - Effect: "Allow"
          Action:
            - "rekognition:DetectLabels"
          Resource: "*"

  stackTags:
    "name": ${self:service}

package:
  excludeDevDependencies: true
  patterns:
    - "!requirements/**"
    - "!state_machines/**"
    - "!test/**"
    - "!README.md"
    - "!requirements.txt"
    - "!node_modules/**"

functions:
  createBlob:
    handler: src.handlers.blobs.index.create_blob
    description: Generate a blob_id with a presigned url to be used to upload the image.
    layers:
      - Ref: PyimageLambdaLayer
    events:
      - http:
          path: /blobs
          method: POST
  
  getBlob:
    handler: src.handlers.blobs.index.get_blob
    description: Get blob labeling status.
    layers:
      - Ref: PyimageLambdaLayer
    events:
      - http:
          path: /blobs/{blob_id}
          method: GET

  labelImage:
    handler: src.handlers.label_images.index.handler
    description: Send the uploaded image to Rekognition to detect labels.
    layers:
      - Ref: PyimageLambdaLayer
    events:
      - s3:
          bucket: ${self:provider.environment.MAIN_BUCKET}
          event: s3:ObjectCreated:Put
          existing: true

  callback:
    handler: src.handlers.callback.index.handler
    description: Send labels to callback url if provided.
    layers:
      - Ref: PyimageLambdaLayer
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          enabled: true
          arn:
            Fn::GetAtt:
              - MainTable
              - StreamArn

resources:
  Resources:
    MainBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MAIN_BUCKET}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MAIN_TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_IMAGE
